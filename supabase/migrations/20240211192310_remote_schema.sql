
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "pg_database_owner";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."club_roles" (
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "name" text,
    "value" text NOT NULL
);

ALTER TABLE "public"."club_roles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."houses" (
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "name" text NOT NULL,
    "value" bigint NOT NULL
);

ALTER TABLE "public"."houses" OWNER TO "postgres";

ALTER TABLE "public"."houses" ALTER COLUMN "value" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."house_value_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."member" (
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "updated_at" timestamp without time zone DEFAULT now(),
    "email" text NOT NULL,
    "password" text NOT NULL,
    "name" text,
    "phone" text,
    "birthday" timestamp without time zone,
    "address" text,
    "university" text,
    "major" text,
    "member_type_value" bigint DEFAULT '1'::bigint,
    "house_value" bigint,
    "participant_term" text NOT NULL,
    "has_role" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."member" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."member_sclub_roles" (
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "member_id" uuid NOT NULL,
    "started_year" bigint NOT NULL,
    "ended_year" bigint NOT NULL,
    "sclub_role_id" uuid
);

ALTER TABLE "public"."member_sclub_roles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."member_type" (
    "id" uuid DEFAULT gen_random_uuid() NOT NULL,
    "value" bigint NOT NULL,
    "name" text NOT NULL
);

ALTER TABLE "public"."member_type" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."role" (
    "id" bigint NOT NULL,
    "name" text NOT NULL
);

ALTER TABLE "public"."role" OWNER TO "postgres";

ALTER TABLE "public"."role" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."role_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."club_roles"
    ADD CONSTRAINT "club_roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."club_roles"
    ADD CONSTRAINT "club_roles_value_key" UNIQUE ("value");

ALTER TABLE ONLY "public"."houses"
    ADD CONSTRAINT "house_house_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."houses"
    ADD CONSTRAINT "house_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."houses"
    ADD CONSTRAINT "house_value_key" UNIQUE ("value");

ALTER TABLE ONLY "public"."member_type"
    ADD CONSTRAINT "member-type_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."member_type"
    ADD CONSTRAINT "member-type_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."member_type"
    ADD CONSTRAINT "member-type_value_key" UNIQUE ("value");

ALTER TABLE ONLY "public"."member"
    ADD CONSTRAINT "member_email_key" UNIQUE ("email");

ALTER TABLE ONLY "public"."member"
    ADD CONSTRAINT "member_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."member_sclub_roles"
    ADD CONSTRAINT "member_roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."role"
    ADD CONSTRAINT "role_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."member"
    ADD CONSTRAINT "member_house_value_fkey" FOREIGN KEY (house_value) REFERENCES public.houses(value) ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."member"
    ADD CONSTRAINT "member_member_type_value_fkey" FOREIGN KEY (member_type_value) REFERENCES public.member_type(value) ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."member_sclub_roles"
    ADD CONSTRAINT "member_sclub_roles_member_id_fkey" FOREIGN KEY (member_id) REFERENCES public.member(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."member_sclub_roles"
    ADD CONSTRAINT "member_sclub_roles_sclub_role_id_fkey" FOREIGN KEY (sclub_role_id) REFERENCES public.club_roles(id) ON UPDATE CASCADE;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."club_roles" TO "anon";
GRANT ALL ON TABLE "public"."club_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."club_roles" TO "service_role";

GRANT ALL ON TABLE "public"."houses" TO "anon";
GRANT ALL ON TABLE "public"."houses" TO "authenticated";
GRANT ALL ON TABLE "public"."houses" TO "service_role";

GRANT ALL ON SEQUENCE "public"."house_value_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."house_value_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."house_value_seq" TO "service_role";

GRANT ALL ON TABLE "public"."member" TO "anon";
GRANT ALL ON TABLE "public"."member" TO "authenticated";
GRANT ALL ON TABLE "public"."member" TO "service_role";

GRANT ALL ON TABLE "public"."member_sclub_roles" TO "anon";
GRANT ALL ON TABLE "public"."member_sclub_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."member_sclub_roles" TO "service_role";

GRANT ALL ON TABLE "public"."member_type" TO "anon";
GRANT ALL ON TABLE "public"."member_type" TO "authenticated";
GRANT ALL ON TABLE "public"."member_type" TO "service_role";

GRANT ALL ON TABLE "public"."role" TO "anon";
GRANT ALL ON TABLE "public"."role" TO "authenticated";
GRANT ALL ON TABLE "public"."role" TO "service_role";

GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
